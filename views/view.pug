extends layout

block content

  style
    include ../public/css/map.css

  style.
    .entities g:hover, .entities g path:hover:not(.label-connector):not(.label-text),
    .entities g:hover path:not(.label-connector):not(.label-text) {
      fill: #8f8f8f;
      cursor: move;
    }
    .entities g:hover > .label-box {
      fill: #8f8f8f;
      cursor: move;
    }

  script.
    var mapType = !{JSON.stringify(mapType)};
    var validTypes = !{JSON.stringify(validTypes)};
    var scratchedObjects = !{JSON.stringify(scratchedObjects)};
    var colors = !{JSON.stringify(colors)};
  
  //- custom colors
  style
    //- unscratched
    | .entities g path:not(.label-connector):not(.label-text) {
    |   fill: #{colors.unscratched};
    | }
    | .entities g.not-scratched path {
    |   fill: #{colors.unscratched};
    | }
    | .entities g .label-box {
    |   fill: #{colors.unscratched};
    | }
    | .entities g.not-scratched .label-box {
    |   fill: #{colors.unscratched};
    | }
    | #share-button {
    |   background-color: #{colors.unscratched};
    | }
    //- unscratched hover
    | .entities g:hover, .entities g path:hover:not(.label-connector):not(.label-text),
    | .entities g:hover path:not(.label-connector):not(.label-text) {
    |   fill: #{colors.unscratched_hover};
    | }
    | .entities g:hover > .label-box {
    |   fill: #{colors.unscratched_hover};
    | }
    //- scratched
    | .entities g.scratched path:not(.label-connector):not(.label-text) {
    |   fill: #{colors.scratched};
    | }
    | .entities g.scratched:hover, .entities g.scratched path:hover:not(.label-connector):not(.label-text),
    | .entities g.scratched:hover path:not(.label-connector):not(.label-text) {
    |   fill: #{colors.scratched};
    | }
    | .entities g.scratched .label-box {
    |   fill: #{colors.scratched};
    | }
    | entities g.scratched:hover > rect {
    |   fill: #{colors.scratched};
    | }
    //- text
    | .entities g .label-text, .entities g .label-text path {
    |   fill: #{colors.text};
    | }
    //- outlines
    | .entities g path:not(.label-connector):not(.label-text) {
    |   stroke: #{colors.outlines};
    | }

  h1#title #{title}

  div#map-container
    div#zoom-controls
      button#zoom-fullscreen(type='button', onclick='fullscreenView()') Fullscreen
      button#zoom-reset(type='button', onclick='resetView()') Reset
      button#zoom-in(type='button', onclick='zoomIn()') +
      button#zoom-out(type='button', onclick='zoomOut()') -

    if mapType == 'world'
      div#svg-container(
        data-zoom-on-wheel="zoom-amount: 0.003; min-scale: 1; max-scale: 8;",
        data-pan-on-drag="button: left;"
      )
        !=mapSVG
    else
      div#svg-container(
        data-zoom-on-wheel="zoom-amount: 0.003; min-scale: 1; max-scale: 2;",
        data-pan-on-drag="button: left;"
      )
        !=mapSVG

  script
    include ../public/js/view.js

  script(src='/js/svg-pan-zoom-container.0.6.1.min.js', type='text/javascript')
  script(src='/js/svg_controls.js', type='text/javascript')
